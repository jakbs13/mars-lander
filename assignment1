# uncomment the next line if running in a notebook
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt

# mass, spring constant, initial position and velocity
m = 1
k = 1
x = 0
v = 1

# simulation time, timestep and time
t_max = 100
dt = 0.1
t_array = np.arange(0, t_max, dt)

# initialise empty lists to record trajectories
x_list = []
v_list = []

# Euler integration
for t in t_array:

    # append current state to trajectories
    x_list.append(x)
    v_list.append(v)

    # calculate new position and velocity
    a = -k * x / m
    x = x + dt * v
    v = v + dt * a

# convert trajectory lists into arrays, so they can be sliced (useful for Assignment 2)
x_array = np.array(x_list)
v_array = np.array(v_list)

# initialise empty list to record verlet data
xverlet_list = []
vverlet_list = []

#verlet integration
for t in t_array:
    
    xverlet_list.append(x)
    vverlet_list.append(v)
    
    new_x = 2 * x - xverlet_list[-1] - (k / m) * x * dt ** 2
    new_v = (new_x - xverlet_list[-1]) / (2 * dt)
    
    xverlet_list.append(new_x)
    vverlet_list.append(new_v)
    
    x = new_x
    v = new_v
    
# convert trajectory lists into arrays, so they can be sliced (useful for Assignment 2)
xverlet_array = np.array(xverlet_list)
vverlet_array = np.array(vverlet_list)
    
# plot the position-time graph
plt.figure(1)
plt.clf()
plt.xlabel('time (s)')
plt.grid()
plt.plot(t_array, x_array, label='x (m)')
plt.plot(t_array, v_array, label='v (m/s)')
plt.legend()
plt.show()

plt.figure(1)
plt.clf()
plt.xlabel('time (s)')
plt.grid()
plt.plot(t_array, xverlet_array, label='x verelt (m)')
plt.plot(t_array, vverlet_array, label='v verlet (m/s)')
plt.legend()
plt.show()
